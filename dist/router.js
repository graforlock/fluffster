var Resolve=require("./services/resolve"),State=require("./fluffster"),history=require("./services/history"),drivers=require("./drivers"),kefir=require("kefir"),StateRouter={disposableStream$:null,mainStream$:null,property$:null,routes:[],defaultErrorHandler:!0,route:function(e){return StateRouter.routes.push(e),{fallbackLogic:function(e){StateRouter.fallbackLogic=e}}},driver:function(e){e in drivers&&(State=drivers[e]())},global:function(e){StateRouter.mainStream$=kefir.pool(),StateRouter.property$=StateRouter.mainStream$.toProperty(),StateRouter.mainStream$.plug(kefir.stream(function(t){return t.emit(e)}))},render:function(e){return StateRouter.mainStream$?void(StateRouter.disposableStream$=new State(e,StateRouter.property$)):void(StateRouter.disposableStream$=new State(e,null))},send:function(e,t){StateRouter.disposableStream$.messages&&StateRouter.disposableStream$.passMessage(e,t)},router:function(e){Resolve(StateRouter.routes,e).then(function(e){return StateRouter.render(e)}).catch(function(t){console.warn(t),StateRouter.defaultErrorHandler?StateRouter.fallbackLogic&&StateRouter.fallbackLogic():Resolve(StateRouter.routes,{location:e,error:t}).then(StateRouter.render)})},link:function(e){history.push(e)},listen:function(){StateRouter.router(history.location),history.listen(StateRouter.router)},stream:function(){return StateRouter.mainStream$}};module.exports=StateRouter;