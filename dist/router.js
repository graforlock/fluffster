var Resolve=require("./services/resolve"),State=require("./fluffster"),ServiceProvider=require("./service-provider"),history=require("./services/history"),drivers=require("./drivers"),utils=require("./utils"),StateRouter={appState:null,sharedState:null,routes:[],defaultErrorHandler:!0,onError:function(){},updateState:function(t){StateRouter.sharedState=utils.extendMany({},StateRouter.appState.state,t),StateRouter.appState.updateState(StateRouter.sharedState)},handleErrorRoute:function(){StateRouter.defaultErrorHandler=!1},route:function(t){return StateRouter.routes.push(t),{onError:function(t){StateRouter.onError=t}}},driver:function(t){t in drivers&&(State=drivers[t]())},render:function(t){StateRouter.rootState?StateRouter.appState=new State(t,StateRouter.rootState):StateRouter.appState=new State(t,null),t.provider&&ServiceProvider.getInstance(t.provider(t.appState)).then(function(t){StateRouter.appState.updateState({response:t})})},send:function(t,e){StateRouter.appState.messages&&StateRouter.appState.passMessage(t,e)},router:function(t){Resolve(StateRouter.routes,t).then(function(t){return StateRouter.render(t)}).catch(function(e){StateRouter.onError?StateRouter.onError(e):console.warn(e),StateRouter.defaultErrorHandler||Resolve(StateRouter.routes,{location:t,error:e}).then(StateRouter.render)})},link:function(t){if(!t.pathname)throw new Error("Router.link() : pathname is Required.");history.push(t)},listen:function(){StateRouter.router(history.location),history.listen(StateRouter.router)},getRootState:function(){return StateRouter.rootState}};module.exports=StateRouter;