function State(t,s,e){return this instanceof State?(this.state={appState:t.appState},this._streamA$=kefir.pool(),this._streamB$=e,this.component=t.component,this._combined$=!(!this._streamA$||!this._streamB$)&&kefir.combine([this._streamA$,this._streamB$],function(t,s){return utils.extendMany({},{appState:t},{global:s})}),this.listeners=[],s&&this.assignMessages(s),this.onNext=function(t){this._streamA$.plug(utils.emit(t))}.bind(this),this.updateState=function(t){var s=utils.extendMany({},this.state,t);utils.compareTo(this.state,s)||(utils.extend(this.state,t),this.onNext(this.state))}.bind(this),this.onNext(this.state),this.provide(),void 0):new State(t)}var utils=require("./utils"),kefir=require("kefir");State.prototype.stream=function(){return this._combined$?this._combined$:this._streamA$},State.prototype.provide=function(){this.stream().onValue(function(t){utils.each(this.component,function(s){s.subscribe&&s.subscribe(t)}.bind(this))}.bind(this))},State.prototype.passMessage=function(t,s){t in this.messages&&this.updateState(this.messages[t](this.state,s))},State.prototype.assignMessages=function(t){this.messages=t},module.exports=State;